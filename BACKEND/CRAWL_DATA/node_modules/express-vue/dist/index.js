'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _models = require('./models');

var _utils = require('./utils');

var NodeCache = require('node-cache');
//TODO add cache options via ENV
var myCache = new NodeCache({});

function expressVue(componentPath, options, callback) {
    if (!process.env.VUE_CACHE_ENABLED) {
        var defaults = new _models.Defaults(options);
        (0, _utils.setupComponentArray)(componentPath, defaults).then(function (promiseArray) {
            Promise.all(promiseArray).then(function (components) {
                (0, _utils.renderComponents)(components, defaults, callback);
            }).catch(function (error) {
                (0, _utils.renderError)(error, callback);
            });
        }).catch(function (error) {
            (0, _utils.renderError)(error, callback);
        });
    } else {
        var cacheObject = Object.assign({}, options.data);
        if (options.settings.vue && options.settings.vue.cache && options.settings.vue.cache.ignoredKeys) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = options.settings.vue.cache.ignoredKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var key = _step.value;

                    if (cacheObject[key]) {
                        delete cacheObject[key];
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }

        var cacheKey = componentPath + JSON.stringify(cacheObject);
        myCache.get(cacheKey, function (error, cachedString) {
            if (error) {
                callback(error, null);
            } else if (cachedString) {
                callback(null, cachedString);
            } else {
                var _defaults = new _models.Defaults(options);
                (0, _utils.setupComponentArray)(componentPath, _defaults).then(function (promiseArray) {
                    Promise.all(promiseArray).then(function (components) {
                        (0, _utils.renderComponents)(components, _defaults, function (error, html) {
                            if (error) {
                                callback(error);
                            } else {
                                myCache.set(cacheKey, html, function (err, success) {
                                    if (err) {
                                        callback(err);
                                    } else if (success) {
                                        callback(null, html);
                                    }
                                });
                            }
                        });
                    }).catch(function (error) {
                        (0, _utils.renderError)(error, callback);
                    });
                }).catch(function (error) {
                    (0, _utils.renderError)(error, callback);
                });
            }
        });
    }
}

exports.default = expressVue;
module.exports = exports['default'];
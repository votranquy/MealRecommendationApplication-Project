'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _models = require('../models');

var _parser = require('../parser');

var _checkPathUtils = require('./checkPathUtils');

var types = new _models.Types();


function setupComponentArray(componentPath, defaults) {
    return new Promise(function (resolve, reject) {
        var array = [(0, _parser.layoutParser)(defaults.layoutPath, defaults, types.LAYOUT)];
        var pathPromiseArray = [];

        (0, _checkPathUtils.getCorrectPathForFile)(componentPath, 'view').then(function (path) {
            array.push((0, _parser.componentParser)(path.path, defaults, types.COMPONENT));

            if (defaults.options.vue && defaults.options.vue.components) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = defaults.options.vue.components[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var component = _step.value;

                        var componentFile = defaults.componentsDir + component + '.vue';
                        pathPromiseArray.push((0, _checkPathUtils.getCorrectPathForFile)(componentFile, 'component'));
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
            Promise.all(pathPromiseArray).then(function (pathObjArray) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = pathObjArray[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var pathObj = _step2.value;

                        array.push((0, _parser.componentParser)(pathObj.path, defaults, types.SUBCOMPONENT));
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
                            _iterator2.return();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                resolve(array);
            }).catch(function (error) {
                reject(error);
            });
        }).catch(function (error) {
            reject(error);
        });
    });
}

exports.default = setupComponentArray;
module.exports = exports['default'];